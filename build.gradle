plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.7.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        name "CurseMaven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name "Modrinth"
        url "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    maven {
        name "Jitpack"
        url "https://jitpack.io"
    }

    maven {
        url "https://maven.shedaniel.me/"
    }

    maven {
        url "https://maven.terraformersmc.com/"
    }

    maven {
        name 'Gegy'
        url 'https://maven.gegy.dev'
    }

    flatDir {
        dir 'libs'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    include(modImplementation("dev.lambdaurora:spruceui:4.0.0+1.19"))

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:1.8.1+kotlin.1.7.0"

    modApi("me.shedaniel.cloth:cloth-config-fabric:7.0.73") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modApi "com.terraformersmc:modmenu:4.0.3"
    shadow ("com.charleskorn.kaml:kaml:0.46.0")
    shadow ("io.socket:socket.io-client:1.0.0")

    modRuntimeOnly "curse.maven:ferritecore-fabric-459857:3824694"
    modRuntimeOnly "maven.modrinth:lazydfu:0.1.3"
    modRuntimeOnly "maven.modrinth:starlight:1.1.1+1.19"
    modRuntimeOnly "maven.modrinth:sodium:mc1.19-0.4.2"
    modRuntimeOnly (name: 'oauth-fabric-1.0.1', ext: 'jar') // For authentication in IntelliJ

    // Added because otherwise Sodium physically will not function in testing.
    // I have no idea why.
    runtimeOnly 'org.joml:joml:1.10.4'
}

shadowJar {
    mergeServiceFiles()

    archiveClassifier.set("shadow")
    configurations = [project.configurations.shadow]

    // need to do this because it won't exclude for some fucking reason
    relocate "kotlinx", "shadow.bluspring.lifelinesmp.kotlinx"
    relocate "kotlin", "shadow.bluspring.lifelinesmp.kotlin"
    relocate "org.jetbrains", "shadow.bluspring.lifelinesmp.jetbrains"
    relocate "org.intellij", "shadow.bluspring.lifelinesmp.intellij"
    relocate "org.snakeyaml", "shadow.bluspring.lifelinesmp.snakeyaml"
    relocate "com.charleskorn", "shadow.bluspring.lifelinesmp.charleskorn"
    relocate "io.socket", "shadow.bluspring.lifelinesmp.io.socket"
}

remapJar {
    inputFile = shadowJar.archiveFile.get()
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}